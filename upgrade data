
local function GetUpgradeInfo(characterName,upgradeIndex)
  local upgradeList = UpgradesData[characterName]
	if not upgradeList then return nil end

	local upgrade = upgradeList[upgradeIndex]
	if not upgrade then return nil end

	-- Return only the info, not the Apply function
	return {
		Name = upgrade.Name,
		Rarity = upgrade.Rarity,
		Description = upgrade.Description
	}
end

local function ApplyUpgrade(characterName, upgradeIndex, player)
  local upgradeList = UpgradesData[characterName]
	if not upgradeList then 
		warn("Character not found:", characterName)
		return false
	end

	local upgrade = upgradeList[upgradeIndex]
	if not upgrade then 
		warn("Upgrade not found at index:", upgradeIndex)
		return false
	end

	-- Apply the upgrade
	upgrade.Apply(player)
	return true
end

local UpgradesModule = {}

local UpgradesData = {
	Luffy = {
		Punch = {
			Info = {
				Rarity = 100,
				Description = "Increases punch damage by 10%.",
			},
			Apply = function(playerData)
				playerData.Damage = playerData.Damage + 10
			end
		},
		Pistol = {
			Info = {
				Rarity = 0,
				Description = "Increases kick damage by 15%.",
			},
			Apply = function(playerData)
				playerData.KickDamage = playerData.KickDamage + 15
			end
		},
	},
	General = {
		Agility = {
			Info = {
				Rarity = 50,
				Description = "Increases punch damage by 10%.",
			},
			Apply = function(playerData)
				playerData.Damage = playerData.Damage + 10
			end
		},
		Health = {
			Info = {
				Rarity = 50,
				Description = "Increases kick damage by 15%.",
			},
			Apply = function(playerData)
				playerData.KickDamage = playerData.KickDamage + 15
			end
		},
	}
}

-- Function to GET upgrade info (just the data, no applying)
function UpgradesModule:GetUpgradeInfoFromModule(characterName,upgradeIndex)
  return GetUpgradeInfo(characterName,upgradeIndex)
end

-- Function to APPLY an upgrade
function UpgradesModule:ApplyUpgradeFromModule(characterName, upgradeIndex, player)
	ApplyUpgrade(characterName,upgradeIndex,player)
end


return UpgradesModule
